<dec f='codebrowser/run-command.h' l='99' type='int pipe_command(struct child_process * cmd, const char * in, size_t in_len, struct strbuf * out, size_t out_hint, struct strbuf * err, size_t err_hint)'/>
<use f='codebrowser/run-command.h' l='112' u='c' c='capture_command'/>
<doc f='codebrowser/run-command.h' l='85'>/**
 * Execute the given command, sending &quot;in&quot; to its stdin, and capturing its
 * stdout and stderr in the &quot;out&quot; and &quot;err&quot; strbufs. Any of the three may
 * be NULL to skip processing.
 *
 * Returns -1 if starting the command fails or reading fails, and otherwise
 * returns the exit code of the command. Any output collected in the
 * buffers is kept even if the command returns a non-zero exit. The hint fields
 * gives starting sizes for the strbuf allocations.
 *
 * The fields of &quot;cmd&quot; should be set up as they would for a normal run_command
 * invocation. But note that there is no need to set the in, out, or err
 * fields; pipe_command handles that automatically.
 */</doc>
<use f='codebrowser/gpg-interface.c' l='174' u='c' c='sign_buffer'/>
<use f='codebrowser/gpg-interface.c' l='231' u='c' c='verify_signed_buffer'/>
<def f='codebrowser/run-command.c' l='1323' ll='1369' type='int pipe_command(struct child_process * cmd, const char * in, size_t in_len, struct strbuf * out, size_t out_hint, struct strbuf * err, size_t err_hint)'/>
<use f='codebrowser/sequencer.c' l='679' u='c' c='run_git_commit'/>
