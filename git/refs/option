<def f='codebrowser/parse-options.h' l='102' ll='113'/>
<size>64</size>
<doc f='codebrowser/parse-options.h' l='51'>/*
 * `type`::
 *   holds the type of the option, you must have an OPTION_END last in your
 *   array.
 *
 * `short_name`::
 *   the character to use as a short option name, &apos;\0&apos; if none.
 *
 * `long_name`::
 *   the long option name, without the leading dashes, NULL if none.
 *
 * `value`::
 *   stores pointers to the values to be filled.
 *
 * `argh`::
 *   token to explain the kind of argument this option wants. Keep it
 *   homogeneous across the repository. Should be wrapped by N_() for
 *   translation.
 *
 * `help`::
 *   the short help associated to what the option does.
 *   Must never be NULL (except for OPTION_END).
 *   OPTION_GROUP uses this pointer to store the group header.
 *   Should be wrapped by N_() for translation.
 *
 * `flags`::
 *   mask of parse_opt_option_flags.
 *   PARSE_OPT_OPTARG: says that the argument is optional (not for BOOLEANs)
 *   PARSE_OPT_NOARG: says that this option does not take an argument
 *   PARSE_OPT_NONEG: says that this option cannot be negated
 *   PARSE_OPT_HIDDEN: this option is skipped in the default usage, and
 *                     shown only in the full usage.
 *   PARSE_OPT_LASTARG_DEFAULT: says that this option will take the default
 *				value if no argument is given when the option
 *				is last on the command line. If the option is
 *				not last it will require an argument.
 *				Should not be used with PARSE_OPT_OPTARG.
 *   PARSE_OPT_NODASH: this option doesn&apos;t start with a dash.
 *   PARSE_OPT_LITERAL_ARGHELP: says that argh shouldn&apos;t be enclosed in brackets
 *				(i.e. &apos;&lt;argh&gt;&apos;) in the help message.
 *				Useful for options with multiple parameters.
 *
 * `callback`::
 *   pointer to the callback to use for OPTION_CALLBACK or
 *   OPTION_LOWLEVEL_CALLBACK.
 *
 * `defval`::
 *   default value to fill (*-&gt;value) with for PARSE_OPT_OPTARG.
 *   OPTION_{BIT,SET_INT} store the {mask,integer} to put in the value when met.
 *   CALLBACKS can use it like they want.
 */</doc>
<mbr r='option::type' o='0' t='enum parse_opt_type'/>
<mbr r='option::short_name' o='32' t='int'/>
<mbr r='option::long_name' o='64' t='const char *'/>
<mbr r='option::value' o='128' t='void *'/>
<mbr r='option::argh' o='192' t='const char *'/>
<mbr r='option::help' o='256' t='const char *'/>
<mbr r='option::flags' o='320' t='int'/>
<mbr r='option::callback' o='384' t='parse_opt_cb *'/>
<mbr r='option::defval' o='448' t='intptr_t'/>
