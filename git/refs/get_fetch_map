<dec f='codebrowser/remote.h' l='198' type='int get_fetch_map(const struct ref * remote_refs, const struct refspec * refspec, struct ref *** tail, int missing_ok)'/>
<doc f='codebrowser/remote.h' l='186'>/*
 * Given a list of the remote refs and the specification of things to
 * fetch, makes a (separate) list of the refs to fetch and the local
 * refs to store into.
 *
 * *tail is the pointer to the tail pointer of the list of results
 * beforehand, and will be set to the tail pointer of the list of
 * results afterward.
 *
 * missing_ok is usually false, but when we are adding branch.$name.merge
 * it is Ok if the branch is not at the remote anymore.
 */</doc>
<use f='codebrowser/builtin/clone.c' l='562' u='c' c='wanted_peer_refs'/>
<use f='codebrowser/builtin/clone.c' l='565' u='c' c='wanted_peer_refs'/>
<use f='codebrowser/builtin/clone.c' l='568' u='c' c='wanted_peer_refs'/>
<use f='codebrowser/builtin/clone.c' l='571' u='c' c='wanted_peer_refs'/>
<use f='codebrowser/builtin/fetch.c' l='212' u='c' c='add_merge_config'/>
<use f='codebrowser/builtin/fetch.c' l='344' u='c' c='get_ref_map'/>
<use f='codebrowser/builtin/fetch.c' l='381' u='c' c='get_ref_map'/>
<use f='codebrowser/builtin/fetch.c' l='394' u='c' c='get_ref_map'/>
<use f='codebrowser/builtin/fetch.c' l='423' u='c' c='get_ref_map'/>
<use f='codebrowser/builtin/remote.c' l='336' u='c' c='get_ref_states'/>
<use f='codebrowser/builtin/remote.c' l='470' u='c' c='get_head_names'/>
<def f='codebrowser/remote.c' l='1875' ll='1922' type='int get_fetch_map(const struct ref * remote_refs, const struct refspec * refspec, struct ref *** tail, int missing_ok)'/>
