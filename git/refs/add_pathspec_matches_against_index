<dec f='codebrowser/pathspec.h' l='99' type='void add_pathspec_matches_against_index(const struct pathspec * pathspec, const struct index_state * istate, char * seen)'/>
<use f='codebrowser/builtin/add.c' l='140' u='c' c='prune_directory'/>
<def f='codebrowser/pathspec.c' l='21' ll='42' type='void add_pathspec_matches_against_index(const struct pathspec * pathspec, const struct index_state * istate, char * seen)'/>
<use f='codebrowser/pathspec.c' l='56' u='c' c='find_pathspecs_matching_against_index'/>
<doc f='codebrowser/pathspec.c' l='8'>/*
 * Finds which of the given pathspecs match items in the index.
 *
 * For each pathspec, sets the corresponding entry in the seen[] array
 * (which should be specs items long, i.e. the same size as pathspec)
 * to the nature of the &quot;closest&quot; (i.e. most specific) match found for
 * that pathspec in the index, if it was a closer type of match than
 * the existing entry.  As an optimization, matching is skipped
 * altogether if seen[] already only contains non-zero entries.
 *
 * If seen[] has not already been written to, it may make sense
 * to use find_pathspecs_matching_against_index() instead.
 */</doc>
