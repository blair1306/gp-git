<dec f='codebrowser/pack.h' l='85' type='void fixup_pack_header_footer(int , unsigned char * , const char * , uint32_t , unsigned char * , off_t )'/>
<use f='codebrowser/builtin/index-pack.c' l='1274' u='c' c='conclude_pack'/>
<use f='codebrowser/builtin/pack-objects.c' l='830' u='c' c='write_pack_file'/>
<use f='codebrowser/bulk-checkin.c' l='40' u='c' c='finish_bulk_checkin'/>
<use f='codebrowser/fast-import.c' l='1019' u='c' c='end_packfile'/>
<def f='codebrowser/pack-write.c' l='205' ll='277' type='void fixup_pack_header_footer(int pack_fd, unsigned char * new_pack_sha1, const char * pack_name, uint32_t object_count, unsigned char * partial_pack_sha1, off_t partial_pack_offset)'/>
<doc f='codebrowser/pack-write.c' l='189'>/*
 * Update pack header with object_count and compute new SHA1 for pack data
 * associated to pack_fd, and write that SHA1 at the end.  That new SHA1
 * is also returned in new_pack_sha1.
 *
 * If partial_pack_sha1 is non null, then the SHA1 of the existing pack
 * (without the header update) is computed and validated against the
 * one provided in partial_pack_sha1.  The validation is performed at
 * partial_pack_offset bytes in the pack file.  The SHA1 of the remaining
 * data (i.e. from partial_pack_offset to the end) is then computed and
 * returned in partial_pack_sha1.
 *
 * Note that new_pack_sha1 is updated last, so both new_pack_sha1 and
 * partial_pack_sha1 can refer to the same buffer if the caller is not
 * interested in the resulting SHA1 of pack data above partial_pack_offset.
 */</doc>
