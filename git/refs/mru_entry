<def f='codebrowser/mru.h' l='32' ll='35'/>
<size>24</size>
<doc f='codebrowser/mru.h' l='4'>/**
 * A simple most-recently-used cache, backed by a doubly-linked list.
 *
 * Usage is roughly:
 *
 *   // Create a list.  Zero-initialization is required.
 *   static struct mru cache;
 *   mru_append(&amp;cache, item);
 *   ...
 *
 *   // Iterate in MRU order.
 *   struct mru_entry *p;
 *   for (p = cache.head; p; p = p-&gt;next) {
 *	if (matches(p-&gt;item))
 *		break;
 *   }
 *
 *   // Mark an item as used, moving it to the front of the list.
 *   mru_mark(&amp;cache, p);
 *
 *   // Reset the list to empty, cleaning up all resources.
 *   mru_clear(&amp;cache);
 *
 * Note that you SHOULD NOT call mru_mark() and then continue traversing the
 * list; it reorders the marked item to the front of the list, and therefore
 * you will begin traversing the whole list again.
 */</doc>
<mbr r='mru_entry::item' o='0' t='void *'/>
<mbr r='mru_entry::prev' o='64' t='struct mru_entry *'/>
<mbr r='mru_entry::next' o='128' t='struct mru_entry *'/>
