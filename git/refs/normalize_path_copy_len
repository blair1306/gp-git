<dec f='codebrowser/cache.h' l='1135' type='int normalize_path_copy_len(char * dst, const char * src, int * prefix_len)'/>
<def f='codebrowser/path.c' l='1078' ll='1162' type='int normalize_path_copy_len(char * dst, const char * src, int * prefix_len)'/>
<use f='codebrowser/path.c' l='1166' u='c' c='normalize_path_copy'/>
<doc f='codebrowser/path.c' l='1053'>/*
 * It is okay if dst == src, but they should not overlap otherwise.
 *
 * Performs the following normalizations on src, storing the result in dst:
 * - Ensures that components are separated by &apos;/&apos; (Windows only)
 * - Squashes sequences of &apos;/&apos; except &quot;//server/share&quot; on Windows
 * - Removes &quot;.&quot; components.
 * - Removes &quot;..&quot; components, and the components the precede them.
 * Returns failure (non-zero) if a &quot;..&quot; component appears as first path
 * component anytime during the normalization. Otherwise, returns success (0).
 *
 * Note that this function is purely textual.  It does not follow symlinks,
 * verify the existence of the path, or make any system calls.
 *
 * prefix_len != NULL is for a specific case of prefix_pathspec():
 * assume that src == dst and src[0..prefix_len-1] is already
 * normalized, any time &quot;../&quot; eats up to the prefix_len part,
 * prefix_len is reduced. In the end prefix_len is the remaining
 * prefix that has not been overridden by user pathspec.
 *
 * NEEDSWORK: This function doesn&apos;t perform normalization w.r.t. trailing &apos;/&apos;.
 * For everything but the root folder itself, the normalized path should not
 * end with a &apos;/&apos;, then the callers need to be fixed up accordingly.
 *
 */</doc>
<use f='codebrowser/setup.c' l='98' u='c' c='prefix_path_gently'/>
<use f='codebrowser/setup.c' l='110' u='c' c='prefix_path_gently'/>
