<def f='codebrowser/refs/ref-cache.h' l='155' ll='167'/>
<size>48</size>
<doc f='codebrowser/refs/ref-cache.h' l='116'>/*
 * A ref_entry represents either a reference or a &quot;subdirectory&quot; of
 * references.
 *
 * Each directory in the reference namespace is represented by a
 * ref_entry with (flags &amp; REF_DIR) set and containing a subdir member
 * that holds the entries in that directory that have been read so
 * far.  If (flags &amp; REF_INCOMPLETE) is set, then the directory and
 * its subdirectories haven&apos;t been read yet.  REF_INCOMPLETE is only
 * used for loose reference directories.
 *
 * References are represented by a ref_entry with (flags &amp; REF_DIR)
 * unset and a value member that describes the reference&apos;s value.  The
 * flag member is at the ref_entry level, but it is also needed to
 * interpret the contents of the value field (in other words, a
 * ref_value object is not very much use without the enclosing
 * ref_entry).
 *
 * Reference names cannot end with slash and directories&apos; names are
 * always stored with a trailing slash (except for the top-level
 * directory, which is always denoted by &quot;&quot;).  This has two nice
 * consequences: (1) when the entries in each subdir are sorted
 * lexicographically by name (as they usually are), the references in
 * a whole tree can be generated in lexicographic order by traversing
 * the tree in left-to-right, depth-first order; (2) the names of
 * references and subdirectories cannot conflict, and therefore the
 * presence of an empty subdirectory does not block the creation of a
 * similarly-named reference.  (The fact that reference names with the
 * same leading components can conflict *with each other* is a
 * separate issue that is regulated by refs_verify_refname_available().)
 *
 * Please note that the name field contains the fully-qualified
 * reference (or subdirectory) name.  Space could be saved by only
 * storing the relative names.  But that would require the full names
 * to be generated on the fly when iterating in do_for_each_ref(), and
 * would break callback functions, who have always been able to assume
 * that the name strings that they are passed will not be freed during
 * the iteration.
 */</doc>
<mbr r='ref_entry::flag' o='0' t='unsigned char'/>
<mbr r='ref_entry::u' o='64' t='union (anonymous union at /home/jon/workspace/git/refs/ref-cache.h:157:2)'/>
<mbr r='ref_entry::name' o='384' t='char []'/>
